---
import ThemeToggle from "./ThemeToggle.astro"

const navItems = [
  {
    title: "Work experience",
    label: "work-experience",
    url: "/#experience",
    aria_label: "Navigate to Work Experience section",
  },
  {
    title: "Projects",
    label: "projects",
    url: "/#projects",
   aria_label: "Navigate to Projects section",
  },
  // {
  //   title: "Education",
  //   label: "education",
  //   url: "/#education",
  //   aria_label: "Navigate to Education section",
  // },
  // {
  //   title: "Certifications",
  //   label: "certifications",
  //   url: "/#certifications",
  //   aria_label: "Navigate to Certifications section",
  // },
  // {
  //   title: "About me",
  //   label: "about-me",
  //   url: "/#about-me",
  //   aria_label: "Meet Markel",
  // },
  {
    title: "Contact",
    label: "contact",
    url: "mailto:markelkortajarena@gmail.com",
    aria_label: "Contact Markel via email",
  },
]
---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
  <nav
    class="flex px-3 text-sm font-medium rounded-full text-gray-800 dark:text-gray-200 justify-center items-center dark:bg-gray-800 bg-white"
    aria-label="Main Navigation"
    >
    {
      navItems.map((link) => (
        <a
          class="relative block px-2 py-2 transition hover:text-blue-500 dark:hover:text-blue-500 focus-visible:ring focus-visible:ring-blue-500 focus-visible:ring-offset-2"
          aria-label={link.label}
          href={link.url}
        >
          {link.title}
        </a>
      ))
    }
    <ThemeToggle />
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav a")

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-blue-500")
            } else {
              item.classList.remove("text-blue-500")
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>